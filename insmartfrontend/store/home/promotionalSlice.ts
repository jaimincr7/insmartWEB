import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import promotionalsService from '../../services/homeServices/promotionalsService';
import { RootState } from '../../utils/store';

export interface PromotionalsState {
  value: number;
  status: 'idle' | 'loading' | 'failed';
  data: {
    status: String;
    promotionals: any;
  };
}

const initialState: PromotionalsState = {
  value: 0,
  status: 'idle',
  data: {
    status: 'idle',
    promotionals: [],
  }
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(promotionals(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const getAllPromotionalAction = createAsyncThunk(
  'getAllPromotionalAction',
  async () => {
    const response = await promotionalsService.getAllPromotionals();
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const promotionals = createSlice({
  name: 'promotionals',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    clearData: (state) => {
      state.data.promotionals = [];
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getAllPromotionalAction.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(getAllPromotionalAction.fulfilled, (state, action) => {
        state.status = 'idle';
        state.data.promotionals = action.payload.promotionals;
      })
      .addCase(getAllPromotionalAction.rejected, (state) => {
        state.status = 'failed';
      });
  },
});

export const { clearData } = promotionals.actions;

// The function below is called a selector and allows us to select a data from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.promotionals.data)`
export const promotionalSelector = (state: RootState) => state.promotionals;

export default promotionals.reducer;
